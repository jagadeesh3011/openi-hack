{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/320209843/Documents/GitHub/openi-hack/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/Users/320209843/Documents/GitHub/openi-hack/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { VOID, PRIMITIVE, ARRAY, OBJECT, DATE, REGEXP, MAP, SET, ERROR, BIGINT } from './types.js';\nvar env = typeof self === 'object' ? self : globalThis;\nvar deserializer = function deserializer($, _) {\n  var as = function as(out, index) {\n    $.set(index, out);\n    return out;\n  };\n  var unpair = function unpair(index) {\n    if ($.has(index)) return $.get(index);\n    var _$index = _slicedToArray(_[index], 2),\n      type = _$index[0],\n      value = _$index[1];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY:\n        {\n          var arr = as([], index);\n          var _iterator = _createForOfIteratorHelper(value),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _index = _step.value;\n              arr.push(unpair(_index));\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          return arr;\n        }\n      case OBJECT:\n        {\n          var object = as({}, index);\n          var _iterator2 = _createForOfIteratorHelper(value),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                key = _step2$value[0],\n                _index2 = _step2$value[1];\n              object[unpair(key)] = unpair(_index2);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          return object;\n        }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP:\n        {\n          var source = value.source,\n            flags = value.flags;\n          return as(new RegExp(source, flags), index);\n        }\n      case MAP:\n        {\n          var map = as(new Map(), index);\n          var _iterator3 = _createForOfIteratorHelper(value),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _step3$value = _slicedToArray(_step3.value, 2),\n                _key = _step3$value[0],\n                _index3 = _step3$value[1];\n              map.set(unpair(_key), unpair(_index3));\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          return map;\n        }\n      case SET:\n        {\n          var set = as(new Set(), index);\n          var _iterator4 = _createForOfIteratorHelper(value),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _index4 = _step4.value;\n              set.add(unpair(_index4));\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          return set;\n        }\n      case ERROR:\n        {\n          var name = value.name,\n            message = value.message;\n          return as(new env[name](message), index);\n        }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport var deserialize = function deserialize(serialized) {\n  return deserializer(new Map(), serialized)(0);\n};","map":{"version":3,"names":["VOID","PRIMITIVE","ARRAY","OBJECT","DATE","REGEXP","MAP","SET","ERROR","BIGINT","env","self","globalThis","deserializer","$","_","as","out","index","set","unpair","has","get","_$index","_slicedToArray","type","value","arr","_iterator","_createForOfIteratorHelper","_step","s","n","done","push","err","e","f","object","_iterator2","_step2","_step2$value","key","Date","source","flags","RegExp","map","Map","_iterator3","_step3","_step3$value","Set","_iterator4","_step4","add","name","message","BigInt","Object","deserialize","serialized"],"sources":["C:/Users/320209843/Documents/GitHub/openi-hack/node_modules/@ungap/structured-clone/esm/deserialize.js"],"sourcesContent":["import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}